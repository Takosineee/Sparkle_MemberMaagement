// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Gym.Models;

public partial class GymContext : DbContext
{
    public GymContext()
    {
    }

    public GymContext(DbContextOptions<GymContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CourseTotalTable> CourseTotalTable { get; set; }

    public virtual DbSet<GenderTable> GenderTable { get; set; }

    public virtual DbSet<IdentityTable> IdentityTable { get; set; }

    public virtual DbSet<MemberMessageTable> MemberMessageTable { get; set; }

    public virtual DbSet<MemberSummaryTable> MemberSummaryTable { get; set; }

    public virtual DbSet<MessageTable> MessageTable { get; set; }

    public virtual DbSet<OrderDetialTable> OrderDetialTable { get; set; }

    public virtual DbSet<OrderTable> OrderTable { get; set; }

    public virtual DbSet<ProductsTable> ProductsTable { get; set; }

    public virtual DbSet<StatusTable> StatusTable { get; set; }

    public virtual DbSet<StudentCourseTable> StudentCourseTable { get; set; }

    public virtual DbSet<TypeTable> TypeTable { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=sparkle001.database.windows.net;Initial Catalog=Gym;Persist Security Info=True;User ID=Sparkle001;Password=@Spark!e00!");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CourseTotalTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.EndCourseTime).HasColumnType("datetime");
            entity.Property(e => e.ReserveDate).HasColumnType("datetime");
            entity.Property(e => e.StartCourseTime).HasColumnType("datetime");
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.StopReserveDate).HasColumnType("datetime");
            entity.Property(e => e.TeacherId).HasColumnName("TeacherID");

            entity.HasOne(d => d.Status).WithMany(p => p.CourseTotalTable)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_CourseTotalTable_StatusTable");

            entity.HasOne(d => d.Teacher).WithMany(p => p.CourseTotalTable)
                .HasForeignKey(d => d.TeacherId)
                .HasConstraintName("FK_CourseTotalTable_MemberSummaryTable");
        });

        modelBuilder.Entity<GenderTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<IdentityTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IdentityTitle).HasMaxLength(50);
        });

        modelBuilder.Entity<MemberMessageTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.MessageId).HasColumnName("MessageID");

            entity.HasOne(d => d.Member).WithMany(p => p.MemberMessageTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_MemberMessageTable_MemberSummaryTable");

            entity.HasOne(d => d.Message).WithMany(p => p.MemberMessageTable)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("FK_MemberMessageTable_MessageTable");
        });

        modelBuilder.Entity<MemberSummaryTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Birthday).HasColumnType("date");
            entity.Property(e => e.IdentityLevelId).HasColumnName("IdentityLevelID");
            entity.Property(e => e.PassWord).HasMaxLength(50);
            entity.Property(e => e.StatusId).HasColumnName("StatusID");

            entity.HasOne(d => d.GenderNavigation).WithMany(p => p.MemberSummaryTable)
                .HasForeignKey(d => d.Gender)
                .HasConstraintName("FK_MemberSummaryTable_GenderTable");

            entity.HasOne(d => d.IdentityLevel).WithMany(p => p.MemberSummaryTable)
                .HasForeignKey(d => d.IdentityLevelId)
                .HasConstraintName("FK_MemberSummaryTable_IdentityTable");

            entity.HasOne(d => d.Status).WithMany(p => p.MemberSummaryTable)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_MemberSummaryTable_StatusTable");
        });

        modelBuilder.Entity<MessageTable>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
        });

        modelBuilder.Entity<OrderDetialTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetialTable)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_OrderDetialTable_OrderTable");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetialTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_OrderDetialTable_ProductsTable");
        });

        modelBuilder.Entity<OrderTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.UnPaidInstallment).HasColumnName("unPaidInstallment");
            entity.Property(e => e.UnPaidPrice).HasColumnName("unPaidPrice");

            entity.HasOne(d => d.Member).WithMany(p => p.OrderTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_OrderTable_MemberSummaryTable");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_OrderTable_ProductsTable");

            entity.HasOne(d => d.Status).WithMany(p => p.OrderTable)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_OrderTable_StatusTable");
        });

        modelBuilder.Entity<ProductsTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DueDay).HasColumnName("dueDay");
        });

        modelBuilder.Entity<StatusTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.TypeId).HasColumnName("typeID");

            entity.HasOne(d => d.Type).WithMany(p => p.StatusTable)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("FK_StatusTable_TypeTable");
        });

        modelBuilder.Entity<StudentCourseTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ApplyDate).HasColumnType("datetime");
            entity.Property(e => e.CourseId).HasColumnName("CourseID");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.StatusId).HasColumnName("StatusID");

            entity.HasOne(d => d.Course).WithMany(p => p.StudentCourseTable)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK_StudentCourseTable_CourseTotalTable");

            entity.HasOne(d => d.Member).WithMany(p => p.StudentCourseTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_StudentCourseTable_MemberSummaryTable");

            entity.HasOne(d => d.Order).WithMany(p => p.StudentCourseTable)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_StudentCourseTable_OrderTable");

            entity.HasOne(d => d.Product).WithMany(p => p.StudentCourseTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_StudentCourseTable_ProductsTable");

            entity.HasOne(d => d.Status).WithMany(p => p.StudentCourseTable)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_StudentCourseTable_StatusTable");
        });

        modelBuilder.Entity<TypeTable>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.TypeDepiction).HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}